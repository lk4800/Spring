<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xmlns:security="http://www.springframework.org/schema/security"
xsi:schemaLocation="http://www.springframework.org/schema/security
http://www.springframework.org/schema/security/spring-security.xsd
http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans.xsd">

    <bean id="customAccessDenied"
  class="net.abc.security.CustomAccessDeniedHandler" />
  <!-- CustomAccessDeniedHandler 클래스의 빈아이디 객체명 custom
  AccessDenied를 설정해서 생성 => 자바코드 표현하면 
   CustomAccessDeniedHandler customAccessDenied=new
   CustomAccessDeniedHandler와 같은 역할을 한다.
  -->
  
  <bean id="customLoginSuccess" 
  class="net.abc.security.CustomLoginSuccessHandler" />
  <!--  CustomLoginSuccessHandler 클래스의 빈아이디 객체명 
  customLoginSuccess을 생성한다.-->
  
  <bean id="bcryptPasswordEncoder"
  class=
"org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />
  <!-- 1. 스프링 시큐리티에서 제공되는 BCryptPasswordEncoder클래스는 비번을 암
  호화 시킨다.-->  
  
  <bean id="customUserDetailsService" 
  class="net.abc.security.CustomUserDetailsService" />
  <!-- 스프링 빈아이디  customUserDetailsService 객체 생성-->
  
  <security:http><!-- 스프링 시큐리티가 http에서 알수 있게 하는 시작지점 설정 -->
  
    <security:intercept-url pattern="/sample/all"
    access="permitAll"/>
    <!-- 특정한 url에 접근할 때 인터셉터(중간에 가로채는것)를 이용해서 접근을 제한
    하는 설정은 <security:intercept-url>을 이용한다. pattern속성값은 
    컨트롤러에 지정한 매핑주소가 된다. access속성은 권한범위를 체크한다.permitAll
    은 모든 사용자를 허용한다. -->
    
    <security:intercept-url pattern="/sample/member" 
    access="hasRole('ROLE_MEMBER')" />
    <!-- ROLE_MEMBER는 로그인한 사용자만 접근할 수 있다. -->
    
     <security:intercept-url pattern="/sample/admin"
     access="hasRole('ROLE_ADMIN')" />
     <!-- 로그인 한 사용자들 중에서 관리자 권한을 가진 사용자만이 접근할 수 있다. -->
     
     <!--
     <security:access-denied-handler error-page="/accessError"/>
      접근금지 에러가 발생했을 때 accessError 매핑주소가 실행되게 함. 
     net.abc.controller패키지에 accessError매핑주소가 실행될 CommonContro
     ller 클래스를 생성한다.-->
     
     <security:access-denied-handler ref="customAccessDenied" />
     <!-- 접근금지(403에러)가 발생했을때 빈아이디 customAccessDenied 빈아이디
     호출 -->
     <!--
    <security:form-login /> 스프링 시큐리티에서 내부적으로 제공하는 폼
    로그인 -->
    
    <security:form-login login-page="/customLogin" 
    authentication-success-handler-ref="customLoginSuccess" />
<!-- 커스텀 로그인 페이지로 이동하는 매핑주소 customLogin 등록 ,
authentication-success-handler-ref 속성은 로그인 성공시 
customLoginSuccess 빈아이디를 호출-->    

<!--
    <security:logout logout-url="/customLogout" 
    invalidate-session="true"/> 로그아웃시 customLogout매핑주소가
    실행돔.  invalidate-session="true"는 로그아웃시 세션을 무효화=>자바 코드로
    표현하면 session.invalidate();와 기능이 같다.-->
    
    <security:remember-me data-source-ref="dataSource"
    token-validity-seconds="604800"/>
    <!-- remember-me(나를 기억하라=>자동로그인 설정 태그명), root-context.
    xml의 빈아이디 dataSource를 호출하면서 오라클 연결작업,
     token-validity-seconds 속성은 쿠키 유효시간(초단위)-->
     
     <security:logout logout-url="/customLogout" 
     invalidate-session="true" delete-cookies="remember-me"/>
     <!-- 로그아웃시 delete-cookies속성에 의해서 remember-me
      쿠키이름을 브라우저로부터 삭제, invalidate-session="true"는 로그아웃시 세션
      무효화처리, 자바(jsp)의 session.invalidate()와 같은 기능을 한다.-->
  </security:http>
  
  <!-- 인증 관리자 설정 -->
  <security:authentication-manager>
    <security:authentication-provider
    user-service-ref="customUserDetailsService">
    <!-- 인증 권한 부여 . 빈아이디 customUserDetailsService 호출-->
    
      <security:password-encoder ref="bcryptPasswordEncoder" />
      <!-- 비번 암호화=> 빈아이디 bcryptPasswordEncoder 를 호출한다. -->
      
    </security:authentication-provider>
  </security:authentication-manager>
</beans>











